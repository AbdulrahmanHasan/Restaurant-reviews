{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","map","window","initMap","fetchRestaurantFromURL","error","console","self","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","name","address","image","className","src","imageUrlForRestaurant","alt","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","comments","breadcrumb","url","location","href","replace","results","RegExp","exec","decodeURIComponent"],"mappings":"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","sourcesContent":["let restaurant;\nlet map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false,\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n};\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = callback => {\n  if (self.restaurant) {\n    // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) {\n    // no id found in URL\n    error = 'No restaurant id in URL';\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant);\n    });\n  }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = `${restaurant.name} Restaurant`;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (\n  operatingHours = self.restaurant.operating_hours,\n) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (const key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = review => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url) url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n"],"file":"restaurant_info.min.js"}