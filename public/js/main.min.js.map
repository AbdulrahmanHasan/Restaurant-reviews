{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","map","window","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","alt","name","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push","navigator","serviceWorker","register","then","log"],"mappings":"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","sourcesContent":["let restaurants;\nlet neighborhoods;\nlet cuisines;\nlet map;\nwindow.markers = [];\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', event => {\n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nfetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) {\n      // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nfetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nfillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  const loc = {\n    lat: 40.722216,\n    lng: -73.987501,\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false,\n  });\n  updateRestaurants();\n};\n\n/**\n * Update page and map for current restaurants.\n */\nupdateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\n    cuisine,\n    neighborhood,\n    (error, restaurants) => {\n      if (error) {\n        // Got an error!\n        console.error(error);\n      } else {\n        resetRestaurants(restaurants);\n        fillRestaurantsHTML();\n      }\n    },\n  );\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nresetRestaurants = restaurants => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n};\n\n/**\n * Create restaurant HTML.\n */\ncreateRestaurantHTML = restaurant => {\n  const li = document.createElement('li');\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = `${restaurant.name} Restaurant`;\n  li.append(image);\n\n  const name = document.createElement('h1');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  li.append(more);\n\n  return li;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\naddMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url;\n    });\n    self.markers.push(marker);\n  });\n};\n\n/**\n * Register SW Worker\n */\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('./sw.js').then(() => {\n    console.log('Service Worker Registered');\n  });\n}\n"],"file":"main.min.js"}